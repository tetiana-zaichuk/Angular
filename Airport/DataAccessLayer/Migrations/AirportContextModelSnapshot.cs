// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AirportContext))]
    partial class AirportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLayer.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AircraftName");

                    b.Property<DateTime>("AircraftReleaseDate");

                    b.Property<int>("DepartureId");

                    b.Property<long>("ExploitationTimeSpanTicks");

                    b.HasKey("Id");

                    b.HasIndex("DepartureId")
                        .IsUnique();

                    b.ToTable("Aircrafts");
                });

            modelBuilder.Entity("DataAccessLayer.Models.AircraftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AircraftId");

                    b.Property<string>("AircraftModel");

                    b.Property<int>("Carrying");

                    b.Property<int>("SeatsNumber");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId")
                        .IsUnique();

                    b.ToTable("AircraftsTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartureId");

                    b.HasKey("Id");

                    b.HasIndex("DepartureId")
                        .IsUnique();

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Departure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DepartureDate");

                    b.HasKey("Id");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<string>("Departure");

                    b.Property<int>("DepartureId");

                    b.Property<DateTime>("DepartureTime");

                    b.Property<string>("Destination");

                    b.HasKey("Id");

                    b.HasIndex("DepartureId")
                        .IsUnique();

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CrewId");

                    b.Property<DateTime>("Dob");

                    b.Property<int>("Experience");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("CrewId")
                        .IsUnique();

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Stewardess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CrewId");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.ToTable("Stewardesses");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FlightId");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Aircraft", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Departure", "Departure")
                        .WithOne("Aircraft")
                        .HasForeignKey("DataAccessLayer.Models.Aircraft", "DepartureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Models.AircraftType", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Aircraft", "Aircraft")
                        .WithOne("AircraftType")
                        .HasForeignKey("DataAccessLayer.Models.AircraftType", "AircraftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Crew", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Departure", "Departure")
                        .WithOne("Crew")
                        .HasForeignKey("DataAccessLayer.Models.Crew", "DepartureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Flight", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Departure", "DepartureEvent")
                        .WithOne("Flight")
                        .HasForeignKey("DataAccessLayer.Models.Flight", "DepartureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Pilot", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Crew", "Crew")
                        .WithOne("Pilot")
                        .HasForeignKey("DataAccessLayer.Models.Pilot", "CrewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Stewardess", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Crew", "Crew")
                        .WithMany("Stewardesses")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Ticket", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
